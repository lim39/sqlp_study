-- 오라클아키텍쳐

/*
- 2일차 실습 때 DISK 사용량을 눈으로 확인하기 위해

index를 사용하게끔 힌트를 주고 수많은 랜덤엑세스를 발생시키게 만들면 의도대로 되지 않을까?

- 옵티마이저 ⇒ 최적화 엔진(핵심엔진)
- SQL엔진 ⇒ 실행엔진
- 그림1-11 (테이블스페이스, 세그먼트, 익스텐트, 블록 모두 표현)
    - 생성된 테이블 마다 (인덱스마다, 파티션마다, LOB마다) 세그먼트 존재
    - 한 세그먼트에 있는 익스텐트는 하나의 테이블이 독점한다
    - 한 익스텐트에 있는 블록은 하나의 테이블이 독점한다
    - 한 블록에 저장된 레코드는 모두 같은 테이블 레코드다

## SQL단계와 실행순서

- parse, excecute, fetch
- 왜 excecute(실행) 횟수가 1회를 초과하는 경우가 존재할 수 있을까

## 커서 개념

- DBMS
    - SGA의 Library Cache에 캐싱돼 반복 재사용되는 최적화된 SQL (프로시저)의 실체는 사실 `Shared SQL Area(공유커서)`
    - PGA의 `private SQL Area(세션커서)`
- 어플리케이션
    - 커넥션으로 알려진 `application Cursor(어플리케이션커서)`

## 논리적I/O 와 물리적I/O

1. 물리적I/O 양이 논리적I/O에 포함되는 이유
    
    [벤다이어그램 그림으로 표현해보기](https://www.notion.so/e197afbf8283470b8017d7bb37b2ca6f)
    
2. 버퍼캐시히트율 공식에서 `종속/조작/통제` 변수 파악하기
    1. 99% 히트율 달성을 위한 튜닝은 책에 소개가 안된건가

## 인덱스로 I/O하는 전체과정 설명해보기

(클라이언트에서 sql 질의를 하는 순서부터)

## 래치락

## 버퍼락 vs 로우락

- `로우락으로 더 세세하게 레코드를 보호해주는데 왜 굳이 버퍼락으로 블록에 락을 거는 걸까`

## 일관성(consistent)모드읽기

- MVCC패턴
- CR COPY
- select

## 현재(current)모드읽기

- update, delete

## 선택도 (오라클성능고도화2권 p.387)

- **결합선택도**
    - where절에 c1, c2 조건이 동시에 만족하는 레코드의 비율
- **조건부확률 컨셉필요**

[사건의 독립과 종속 벤다이어그램만 그리세요.](https://youtu.be/6BHYXF8GRIg)

### 책 중간문단 예시

> `where 직급 = '부장'` 의 선택도 : 25%
`where 연봉 ≥ 5,000`  의 선택도 : 10%
> 

> “만약 연봉이 5,000만원 이상인 사원이 모두 부장이라면 실제 위 쿼리 결과는 100(=1,000 X 0.1)건이다.”
> 

**위 ‘만약’ 가정을 만족하는 데이터 분포로 아래와 같은 계산을 할 수 있다.**

> “부장인 사람들 중의 40%가 연봉이 5,000만원 이상이다”
>
 */